!function(){"use strict";function e(e,t,n,r){e.classList.remove("red-alert"),e.classList.remove("green-alert"),!0===t?function(e){if(e.classList.add("red-alert"),"P"!==e.firstElementChild.tagName){var t=document.createElement("p");t.innerText=!1===r?"uzupełnij poprawnie":n+": nazwa Systemu jest zajęta",t.classList.add("alert_p"),e.insertBefore(t,e.querySelector("label"))}else"UZUPEŁNIJ POPRAWNIE"===e.querySelector("p").innerText?e.querySelector("p").innerText=!1===r?"proszę, popraw treść":n+": nazwa już istnieje":e.querySelector("p").innerText=!1===r?"uzupełnij poprawnie":n+": nazwa Systemu jest zajęta"}(e):function(e){e.classList.add("green-alert");var t=e.querySelector("label").lastElementChild.value;if("SELECT"===e.querySelector("label").lastElementChild.tagName&&("0"===t?t="podstawowy system miar":"1"===t&&(t="system trójwymiarowy")),"P"!==e.firstElementChild.tagName){var n=document.createElement("p");n.innerText="Poprawnie zaznaczono: "+t,n.classList.add("alert_p"),e.insertBefore(n,e.querySelector("label"))}else e.querySelector("p").innerText="Poprawnie zaznaczono: "+t}(e)}function t(e){for(var t=e.querySelectorAll(".alert"),n=0;n<t.length;n++){t[n].classList.remove("green-alert"),t[n].classList.remove("red-alert");var r=t[n].querySelector("label");"INPUT"===r.lastElementChild.tagName&&(r.lastElementChild.value=""),"P"===t[n].firstElementChild.tagName&&t[n].removeChild(t[n].firstElementChild)}}function n(e){var n=e.querySelector(".board");n.classList.remove("green-alert"),"P"===n.firstElementChild.tagName&&n.removeChild(n.querySelector("p")),t(e)}var r={};function o(e){e=e.toLowerCase().trim();["/","<",">","?",";","'",":",'"',"[","]","{","}","`","~","!","@","#","$","%","^","&","(",")","=","+","\\","|"].forEach(function(t){for(var n=0;n<e.length;n++)if(e.charAt(n)===t){e=e.replace(t,"*")}});var t=void 0,n=void 0;for(var o in r){o===e&&(t=!0);var l=r[o];for(var a in l)a===e&&(n=!0)}return[e,t,n]}function l(e){for(var t=[],n=0;n<e.length;n++)t.push(e[n]);return t}function a(n){var r=void 0;function a(e){var t=e.value,n=void 0,r=void 0,l=void 0;if(0===t.trim().length)n=!1;else{n=!0;var a=o(t);r=a[0],l=a[1]}return[e,n,r,l]}return function(t){var n,o,i=l(t.querySelectorAll("input")),c=l(t.querySelectorAll("select")),s=[],u=void 0,d=void 0;for(u=0;u<i.length;u++){var v=i[u],m=t.querySelectorAll(".alert input")[u].parentNode.parentNode,y=a(v);!0!==y[1]||!0===y[3]&&v===document.querySelector("section input")?!0===y[1]&&!0===y[3]&&v===document.querySelector("section input")?e(m,!0,y[2],y[3]):e(m,!0,y[2],!1):(s.push(y[2]),e(m,!1,y[2],!1))}for(d=0;d<c.length;d++)s.push(c[d].value),e(t.querySelectorAll(".alert select")[d].parentNode.parentNode,!1);o=u+d,r=(n=s).length===o&&n}(n),!1!==r&&function(e,n){if(n!==document.querySelectorAll("section")[1]){var r=n.querySelector(".board");if(r.classList.add("green-alert"),"P"!==r.firstElementChild.tagName){var o=document.createElement("p");o.classList.add("alert_p"),r.insertBefore(o,n.querySelector(".btn"))}var l=r.querySelector("p"),a=[e[0],e[1],e[2]];"0"===a[2]?(a.pop(),a.push(" podstawowy system miar")):"1"===a[2]&&(a.pop(),a.push(" system trójwymiarowy")),l.innerText="Uzupełniono dane: "+a.join(", ")}t(n)}(r,n),r}function i(e,t,n){var r=e[t][n],o=n,l=r[0],a=r[1];if(1===r[2]){var i=o+" kw";e[t][i]=[l,a*a,2];var c=o+" sz";e[t][c]=[l,a*a*a,3]}}function c(e){var t=e[0],n=e[1],o=Number(e[2]);r[t]={},r[t][n]=["basic",1,o],i(r,t,n)}function s(e,t,n){var r=e[0],o=Number(e[1]),l=e[2],a=[l,o,n[t][l][2]];n[t][r]=a,i(n,t,r)}function u(e,t,r){var o,a,i=document.querySelectorAll("section"),c=document.querySelectorAll("div.hide-show-area"),s=l(i),u=l(c);e.currentTarget===t?(s[2].classList.add("displayFlex"),s[2].classList.remove("displayNone"),u[0].classList.add("rolltop"),n(i[1])):e.currentTarget===r&&(s[2].classList.remove("displayFlex"),s[2].classList.add("displayNone"),u[0].classList.remove("rolltop"),n(i[2]),o=document.querySelector(".brnch-selected"),(a=document.createEvent("Event")).initEvent("click",!1,!1),o.dispatchEvent(a))}document.addEventListener("DOMContentLoaded",function(){e=document.querySelectorAll("section")[0],e.querySelector(".btn").addEventListener("click",function(){var t=a(e);!1!==t&&c(t)});var e}),document.addEventListener("DOMContentLoaded",function(){n=document.querySelectorAll("section")[2],n.querySelector(".btn").addEventListener("click",function(){var e=a(n);if(!1!==e){var t=document.querySelector(".brnch-selected").innerText.toLowerCase().trim();s(e,t,r)}}),e=document.querySelector("#openFormulaToAddNewUnit"),t=document.querySelector(".back"),e.addEventListener("click",function(n){u(n,e,t)}),t.addEventListener("click",function(n){u(n,e,t)});var e,t;var n});var d={howMuchOfBasicIsIt:function(e,t){for(var n="",r=1;"basic"!==n;)r*=t[e][1],e=n=t[e][0];return r},converter:function(e,t,n,r){return e*(this.howMuchOfBasicIsIt(t,r)/this.howMuchOfBasicIsIt(n,r))},sideOfSquare:function(e,t,n,r){var o=Math.sqrt(e);return this.converter(o,t,n,r)},edgeOfCube:function(e,t,n,r){var o=Math.pow(e,1/3);return this.converter(o,t,n,r)},square:function(e,t,n,r){var o=this.sideOfSquare(e,t,n,r);return Math.pow(o,2)},cube:function(e,t,n,r){var o=this.edgeOfCube(e,t,n,r);return Math.pow(o,3)},convertToNewUnit:function(e,t,n,r){return this.converter(t,n,r,e)},squareToNewUnit:function(e,t,n,r){return this.square(t,n,r,e)},cubeToNewUnit:function(e,t,n,r){return this.cube(t,n,r,e)}};function v(e){for(var t=e.currentTarget,n=t.value.toLowerCase().trim(),o=document.querySelectorAll("section")[1].querySelectorAll("select"),l=o[0],a=o[1],i=document.querySelector(".brnch-selected").innerText.toLowerCase().trim(),c=r[i][n][2],s=0;s<t.length;s++){var u=r[i][l[s].innerText][2],d=l[s],v=a[s];u!==c&&(l.removeChild(d),a.removeChild(v),s--)}}function m(){var e;(e=new XMLHttpRequest).responseType="json",e.onreadystatechange=function(){if(e.readyState===XMLHttpRequest.DONE){var t=e.response;!function(e){for(var t in e){var n=t,o=void 0,l=void 0,a=void 0,i=e[t];for(var u in i){var d=0;if("basic"===i[u][0]&&(d++,o=u,l=i[u][2]),(a=[]).push(u),a.push(i[u][1]),a.push(i[u][0]),1===d){var v=[n,o,l];c(v)}else 1!==d&&(s(a,t,r),a=[])}}}(t)}},e.open("GET","./dataToConvert.json"),e.send();var t=document.querySelectorAll("section")[3],n=t.querySelector(".board");n.classList.add("green-alert");var o=document.createElement("P");o.innerText="Pobrane Systemy Miar umieszczono w konwerterze",o.classList.add("alert_p"),n.insertBefore(o,t.querySelector(".btn")),t.querySelector(".btn").removeEventListener("click",m)}function y(e,t){var n=document.querySelectorAll("section")[1],r=document.querySelectorAll("section")[2],o=n.querySelectorAll("select")[0],l=o.parentElement,a=n.querySelectorAll("select")[1],i=a.parentElement,c=r.querySelector("select"),s=c.parentElement;l.removeChild(o),i.removeChild(a),s.removeChild(c);for(var u=0;u<3;u++){var d=void 0,m=document.createElement("select");1===u?(d=l,m.addEventListener("change",function(e){v(e)})):2===u?(d=i,m.addEventListener("change",function(e){v(e)})):d=s,d.appendChild(m),y(m,e,t)}function y(e,t,n){var r=t[n];for(var o in r){var l=document.createElement("option");l.innerText=String(o),e.appendChild(l)}}}function p(e){var t=document.querySelector(".branches"),r=0;for(var o in e)r++;function a(r){r.addEventListener("click",function(){var o,a,i,c,s,u;!function(n){for(var r=t.querySelectorAll("div").length,o=t.querySelectorAll("div"),a=0;a<r;a++)o[a].classList.remove("brnch-selected");n.classList.add("brnch-selected"),function(t){var n=t.innerText.toUpperCase().trim();for(var r in e){var o=r.toUpperCase().trim();o===n&&y(e,r)}}(n),function(){l(document.querySelectorAll("div.hide-show-area"))[0].classList.remove("rolltop");var e=l(document.querySelectorAll("section"));e[2].classList.remove("displayFlex"),e[2].classList.add("displayNone")}()}(r),document.querySelector(".output").innerText="Tu wyświetli się wynik.",n(r.parentNode.parentNode),o=document.querySelectorAll("section")[1],a=o.querySelector("input"),i=o.querySelector(".output"),c=o.querySelectorAll("select"),s=c[0],u=c[1],a.addEventListener("keyup",function(){i.innerText=a.value+" "+s.value+" na "+u.value}),s.addEventListener("change",function(){i.innerText=a.value+" "+s.value+" na "+u.value}),u.addEventListener("change",function(){i.innerText=a.value+" "+s.value+" na "+u.value})})}0!==r&&function(){0!==t.querySelectorAll("p").length&&t.removeChild(t.querySelector("p"));for(var n=t.querySelectorAll("div").length,r=0;r<n;r++)t.removeChild(t.querySelectorAll("div")[0]);for(var o in e){var l=document.createElement("div");l.innerText=o,t.appendChild(l),a(l)}}()}document.addEventListener("DOMContentLoaded",function(){t=document.querySelector(".branches"),n=document.querySelectorAll(".branches div").length,0===t.querySelectorAll("p").length&&0!==n||function(e){0!==e.querySelectorAll("p").length&&(e.removeChild(e.querySelector("p")),e.removeChild(e.querySelectorAll("div")[0]),e.removeChild(e.querySelectorAll("div")[1]));var t=document.createElement("div"),n=document.createElement("div");t.innerText="Pobierz dane!",n.innerText="Dodaj własne dane!",e.appendChild(t),e.appendChild(n);var r=document.createElement("p");function o(e){var t=document.createEvent("Event");t.initEvent("click",!1,!1);var n=document.querySelectorAll("nav div");"pobierz dane!"===e.innerText.trim().toLowerCase()?n[2].dispatchEvent(t):n[1].dispatchEvent(t)}r.style.paddingLeft="1px",r.innerText="Najpierw dodaj lub pobierz Systemy Miar:",e.insertBefore(r,t),t.addEventListener("click",function(e){o(t)}),n.addEventListener("click",function(e){o(n)})}(t),e=document.querySelectorAll("section")[1],e.querySelector(".btn").addEventListener("click",function(){var t=a(e);!1!==t&&function(e){var t=document.querySelector(".brnch-selected").innerText.toLowerCase().trim(),n=r[t],o=e[0],l=e[1].toLowerCase().trim(),a=e[2].toLowerCase().trim();!function(e,t){var n=document.querySelector(".output"),r=t[0],o=t[1],l=t[2];n.innerText=r+" razy "+o+" to "+e+" razy "+l}(function(e,t,n,r){return 0===e[n][2]?d.convertToNewUnit(e,t,n,r):1===e[n][2]?d.convertToNewUnit(e,t,n,r):(e[n][2],d.convertToNewUnit(e,t,n,r))}(n,o,l,a),e)}(t)});var e;var t,n}),document.addEventListener("DOMContentLoaded",function(){document.querySelectorAll("section")[3].querySelector(".btn").addEventListener("click",m)}),document.addEventListener("DOMContentLoaded",function(){for(var e=document.querySelectorAll("input"),t=e.length,n=function(t){var n=e[t];n.addEventListener("keyup",function(){"unitsys"===n.name?l(n,!0,!1):"unitsys"!==n.name&&"basicunit"!==n.name&&"num"!==n.name&&"numofrefer"!==n.name?l(n,!1,!0):"basicunit"===n.name&&l(n,!1,!1)})},r=0;r<t;r++)n(r);function l(e,t,n){var r=e.parentNode,l=r.querySelector("input"),i=o(l.value),c=void 0,s=i[0],u=i[1],d=i[2],v=t,m=n;l.value=s,!0===v?!0===u?a(l,c="Nazwa systemu jest zajęta i nie może zostać użyta",!0):a(l,c,!1):!0===m?!0===d?a(l,c="Jednostka '"+s+"' już istnieje, ale może zostać nadpisana",!0):a(l,c,!1):a(l,c="do not show any communicates, remove alerts",!1)}function a(e,t,n){var r=e.parentNode.parentNode,o=r.lastElementChild;for(r.classList.remove("green-alert"),r.classList.remove("red-alert");"P"===r.firstElementChild.tagName;){var l=r.querySelectorAll("p"),a=l[0];r.removeChild(a)}if(!0===n){var i=document.createElement("p");i.classList.add("alert_p"),r.insertBefore(i,o),i.innerText=t}}}),document.addEventListener("DOMContentLoaded",function(){t=l(document.querySelectorAll("nav div")),t.forEach(function(e){return e.addEventListener("click",function(e){!function(e,t){t.forEach(function(e){return e.classList.remove("selected")}),e.currentTarget.classList.add("selected")}(e,t),function(e){var t=document.querySelectorAll("section"),o=l(t),a=l(document.querySelectorAll("div.hide-show-area")),i=document.querySelectorAll("nav div"),c=e.currentTarget;c===i[0]?(p(r),o[0].style.display="none",o[1].style.display="flex",a[0].classList.add("rolltop"),o[2].classList.add("displayNone"),o[2].classList.remove("displayFlex"),o[3].style.display="none",o[4].style.display="none",n(t[1]),n(t[2])):c===i[1]?(o[0].style.display="flex",o[1].style.display="none",o[2].classList.add("displayNone"),o[2].classList.remove("displayFlex"),o[3].style.display="none",o[4].style.display="none",n(t[0])):c===i[2]&&(o[0].style.display="none",o[1].style.display="none",o[2].classList.add("displayNone"),o[2].classList.remove("displayFlex"),o[3].style.display="flex",o[4].style.display="none")}(e)})}),e=l(document.querySelectorAll("section")),e[0].style.display="none",e[1].style.display="none",e[2].classList.add("displayNone"),e[3].style.display="none",e[4].style.display="flex";var e;var t})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
